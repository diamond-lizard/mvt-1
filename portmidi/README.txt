This subdirectory concerns sending and receiving MIDI data by using the code
provided by PortMidi <http://portmedia.sourceforge.net/portmidi/>.  It has the
following files:

     README.txt                   this file
     INSTALL.txt                  getting the PortMidi interface to work
     test-portmidi.scm            testing the interface
     portmidi-ffi-interface.c     an interface program in C
     portmidi-ffi-interface.scm   glue to run the C interface in Scheme
     make-portmidi                a call to GCC for OS X

Instructions for getting these programs to work properly are in INSTALL.txt.
Here we describe their general use.

MIDI SETUP

To use this PortMidi code, the MIDI setup should looks like this:

                              PortMidi                    
    keyboard  -- MIDI in -->  interface  -- MIDI out -->  instrument

The PortMidi interface code sits between MIDI in and out.  It is able to
respond to notes or other MIDI events received from an attached MIDI keyboard.
It can send notes and other MIDI events to an attached instrument on any of
the 16 channels.  (For simplicity, the code here deals with one input and one
output device at a time, although MIDI files can actually do more.)

The keyboard here is typically a piano-style MIDI keyboard connected to the
computer over USB or via some sort of hardware interface.  However, MIDI input
can be generated by other means, including other MIDI programs.

The instrument here can be an external synthesizer (connected via a hardware
interface or over USB) or a software instrument, the most common being a "VST"
instrument.  There are many commercial and free VST instruments that can be
used.  They may be standalone programs, or require a special "host" program to
run.  (A nice VST host for both Mac and Windows is called Minihost Modular
<http://forum.image-line.com/viewtopic.php?f=1919&t=123031> and another is
called MuLab <http://www.mutools.com/mulab-downloads.html>.)  The standalone
or host program must be set up so that it receives MIDI input from a program
source (called IAC on the Mac), rather than directly from the MIDI keyboard.

LOW-LEVEL MIDI INTERFACE (details for programmers)

The low-level MIDI interface provided here is called "portmidi-ffi-interface".
It can be used standalone, but the main application is for running the program
mvt-spurt from within Emacs.  (See doc/emacs-mvt-mode.txt for details.)  The
interface is similar to the Evhan Hanson CoreMidi package used in the SPUR
package <http://www.evanhanson.com/~evhan/git/racket-coremidi.git/index.html>.
There are, however, a few differences:

   - midi-open  now takes three arguments:
       an input MIDI device number (or #f)
       an output MIDI device number (or #f)
       a function of four arguments (or #f) that is called on MIDI received;
          the args are: timestamp, status, data1, data2
   - midi-close now takes no arguments
   - message now takes just three arguments: status, data1, data2

There are also two extra functions provided:

   - display-midi-devices of no arguments
       This can be used to see the device numbers needed for midi-open
   - set-reroute of one argument: a channel 1-16 or 0 for no reroute
       This allows a MIDI keyboard playing on one channel to be heard 
       and/or recorded on another channel.

