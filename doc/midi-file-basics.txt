There are many tutorials about MIDI files online, and these can be consulted
for details.  Here are the basic ideas.

MIDI files are sequences of instructions for playing notes and otherwise
controlling musical instruments.  Each instruction is intended to go to a MIDI
device over one of 16 channels.  The device can be an electronic instrument
connected to the computer (typically via USB), or it can be a software
instrument that is capable of producing sounds.  The MIDI file itself does not
contain any sound information; its instructions simply say, for example, at
time x, ask the instrument listening on channel y, to start playing note z.

For convenience to the user, MIDI files are typically divided into some number
of tracks that are to be run in parallel.  For example, one track might have
all the instructions for a piano part and another might have those for a
guitar part.  A common usage is to have a 1-1 correspondence between tracks
and channels: one track for channel 3 (assumed to go to a piano,say) and one
track for channel 8 (assumed to go to guitar).  But this is not necessary.  It
may be useful to have many tracks with the same channel, for example, one
track for the left hand of the piano part and another for the right hand. It
may also be useful to have a track with many channels, for example, when a
lead line is to be played in unison on two channels.

In addition to starting and stopping notes, MIDI files have other instructions
for the instruments that are listening.  For example, for a piano, the sustain
pedal might need to go up or down; for an electric organ, the volume might go
louder or softer, for a guitar, a vibrato effect may increase or decrease.
These are called controller messages and there are 128 varieties of them.
There are other similar instructions that (for historical reasons) are not
controller messages: pitch bend and aftertouch.  Finally, there are program
change instructions for MIDI instruments that are capable of making a variety
of sounds. An instrument can be told to change to any of 128 possible
programs.  There are some informal conventions (called "General MIDI") about
what these programs are supposed to sound like. For example, the program 0 is
supposed to sound something like an acoustic piano, and program 4 like an
electric piano. This allows a MIDI file created by someone to be used by
somebody else with some expectation that they will sound reasonably similar.
(Not all MIDI instruments respect these conventions.)

Finally, MIDI files contain other special instructions not directed to
instruments.  Many of these are just for documentation, but one that is not is
tempo.  MIDI files do not use realtime clock values, but rely instead on
special MIDI time units.  A separate tempo instruction in a MIDI file says how
to relate those time units to the realtime clock.  So, for example, to speed
up or speed down the playing of notes, it is not necessary to change the note
instructions in the file. Instead a tempo change is made in one instruction
and the timing of all subsequent instructions is reinterpreted accordingly.

The MIDICSV and MVT formats used by this package are ways of representing the
information in a MIDI file in ASCII form.  Here is a simple CSV file included
with the MIDICSV package:

     0, 0, Header, 1, 2, 480
     1, 0, Start_track
     1, 0, Title_t, "Close Encounters"
     1, 0, Text_t, "Sample for MIDIcsv Distribution"
     1, 0, Copyright_t, "This file is in the public domain"
     1, 0, Time_signature, 4, 2, 24, 8
     1, 0, Tempo, 500000
     1, 0, End_track
     2, 0, Start_track
     2, 0, Instrument_name_t, "Church Organ"
     2, 0, Program_c, 1, 19
     2, 0, Note_on_c, 1, 79, 81
     2, 960, Note_off_c, 1, 79, 0
     2, 960, Note_on_c, 1, 81, 81
     2, 1920, Note_off_c, 1, 81, 0
     2, 1920, Note_on_c, 1, 77, 81
     2, 2880, Note_off_c, 1, 77, 0
     2, 2880, Note_on_c, 1, 65, 81
     2, 3840, Note_off_c, 1, 65, 0
     2, 3840, Note_on_c, 1, 72, 81
     2, 4800, Note_off_c, 1, 72, 0
     2, 4800, End_track
     0, 0, End_of_file

Here is the same file in the MVT format used here:

     start-file 4 4
     start-track "Close Encounters"
       1:1:0   meta Text_t "Sample for MIDIcsv Distribution"
       1:1:0   meta Copyright_t "This file is in the public domain"
       1:1:0   tempo 120.00
     end-track
     start-track "Track2"
       1:1:0   meta Instrument_name_t "Church Organ"
       1:1:0   program 2 19
       1:1:0   note 2  G5  81 2:0
       1:3:0   note 2  A5  81 2:0
       2:1:0   note 2  F5  81 2:0
       2:3:0   note 2  F4  81 2:0
       3:1:0   note 2  C5  81 2:0
     end-track
     end-file

As can be seen from the MVT version, there are two tracks in the file.  The
first has some text documentation and sets the tempo to 120 beats per minute.
(120 bpm means .5 seconds per beat, or equivalently, 500000 microseconds per
beat, which is what CSV uses.)  The second track first calls for a program
change on channel 2. As suggested by the Instrument_name documentation,
program 19 is supposed to sound like a church organ according to the general
MIDI convention. It then asks for five notes to be played on channel 2, the
famous John Williams "Close Encounters" theme. After the channel, the other
arguments for these five note instructions are the pitch to be played, how
hard to play it (here, a fixed velocity of 81), and the duration (here, a
fixed 2 beats).  The CSV file does not use note names, and breaks the notes
into separate note-on and note-off events.  In MVT, each event is timed in a
bar:beat:unit format, with a fixed 960 units per beat.  In CSV, each event is
timed in MIDI clocks units with a variable number of units per quarter note,
here set to 480 in the first line.  The first line of the MVT file (and the
Time signature line of the CSV file) says that the piece is in 4/4 time.

The rest is pretty much more of the same. 
